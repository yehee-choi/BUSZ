package com.example.cv2_project1

import android.content.pm.PackageManager
import androidx.core.content.ContextCompat
import androidx.activity.ComponentActivity
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.camera.view.PreviewView

@Composable
fun MainScreen(
    activity: ComponentActivity,
    onCameraManagerReady: (CameraManager) -> Unit,
    onSpeechManagerReady: ((String) -> Unit, (Boolean) -> Unit) -> Unit // Í≤∞Í≥º ÏΩúÎ∞±, ÏÉÅÌÉú ÏΩúÎ∞±
) {
    var speechResult by remember { mutableStateOf("Î≤ÑÏä§ Î≤àÌò∏Î•º ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî") }
    var isListening by remember { mutableStateOf(false) }
    var speechCompleted by remember { mutableStateOf(false) }
    var objectDetectionStatus by remember { mutableStateOf("Í∞ùÏ≤¥ Í∞êÏßÄ ÎåÄÍ∏∞ Ï§ë") }

    var cameraManager: CameraManager? by remember { mutableStateOf(null) }

    // MainActivityÏóê ÏΩúÎ∞± Îì±Î°ù
    LaunchedEffect(Unit) {
        onSpeechManagerReady(
            { result ->
                speechResult = result
                speechCompleted = true // ÏùåÏÑ± Ïù∏Ïãù ÏôÑÎ£å
                objectDetectionStatus = "Í∞ùÏ≤¥ Í∞êÏßÄ ÏãúÏûëÎê®"
            }, // Í≤∞Í≥º ÏΩúÎ∞±
            { listening -> isListening = listening } // ÏÉÅÌÉú ÏΩúÎ∞±
        )
    }

    // ÏÉÅÌÉúÏóê Îî∞Î•∏ UI ÏóÖÎç∞Ïù¥Ìä∏
    val statusText = when {
        speechCompleted -> "Î≤ÑÏä§ Î™®ÎãàÌÑ∞ÎßÅ & Í∞ùÏ≤¥ Í∞êÏßÄ Ïã§Ìñâ Ï§ë"
        isListening -> "Î≤ÑÏä§ Î≤àÌò∏Î•º ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî..."
        else -> "ÏùåÏÑ± Ïù∏Ïãù Ï§ÄÎπÑ Ï§ë..."
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
    ) {
        // Ïπ¥Î©îÎùº ÎØ∏Î¶¨Î≥¥Í∏∞ ÏòÅÏó≠ (ÏÉÅÎã® 60%)
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .weight(0.6f)
        ) {
            AndroidView(
                factory = { context ->
                    PreviewView(context).apply {
                        if (ContextCompat.checkSelfPermission(activity, android.Manifest.permission.CAMERA)
                            == PackageManager.PERMISSION_GRANTED) {

                            // Ìñ•ÏÉÅÎêú CameraManager ÏÉùÏÑ± (Í∞ùÏ≤¥ Í∞êÏßÄ Ìè¨Ìï®)
                            val manager = CameraManager(
                                context = activity,
                                lifecycleOwner = activity,
                                previewView = this,
                                textToSpeech = (activity as MainActivity).textToSpeech
                            )
                            cameraManager = manager
                            onCameraManagerReady(manager)

                            // ÏùåÏÑ± Ïù∏Ïãù ÏôÑÎ£å ÌõÑÏóêÎßå Ïπ¥Î©îÎùº ÏãúÏûë
                            if (speechCompleted) {
                                manager.startCamera()
                            }
                        }
                    }
                },
                modifier = Modifier.fillMaxSize()
            )

            // Í∞ùÏ≤¥ Í∞êÏßÄ ÏÉÅÌÉú Ïò§Î≤ÑÎ†àÏù¥
            if (speechCompleted) {
                Card(
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(16.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xAA000000)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text(
                        text = "üîç Í∞ùÏ≤¥ Í∞êÏßÄ Ï§ë",
                        color = Color.White,
                        fontSize = 12.sp,
                        modifier = Modifier.padding(8.dp)
                    )
                }
            }
        }

        // Ï†ïÎ≥¥ ÏòÅÏó≠ (ÌïòÎã® 40%)
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .weight(0.4f)
                .background(Color(0xFF2C2C2C))
                .padding(16.dp),
            verticalArrangement = Arrangement.SpaceEvenly,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Ï†ÑÏ≤¥ ÏÉÅÌÉú ÌÖçÏä§Ìä∏
            Text(
                text = statusText,
                color = Color.White,
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                textAlign = TextAlign.Center,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            // Î≤ÑÏä§ Ï†ïÎ≥¥ ÏòÅÏó≠
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp),
                colors = CardDefaults.cardColors(
                    containerColor = if (speechCompleted) Color(0xFF1976D2) else Color(0xFF404040)
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(12.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = if (speechCompleted) "üöå" else "üé§",
                            fontSize = 24.sp,
                            modifier = Modifier.padding(end = 12.dp)
                        )
                        Column {
                            Text(
                                text = if (speechCompleted) "Î≤ÑÏä§ Î™®ÎãàÌÑ∞ÎßÅ" else "ÏùåÏÑ± Ïù∏Ïãù",
                                color = Color.White,
                                fontSize = 12.sp,
                                fontWeight = FontWeight.Medium
                            )
                            Text(
                                text = speechResult,
                                color = Color.White,
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                }
            }

            // ÏÉÅÌÉú ÌëúÏãú ÏòÅÏó≠
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                // ÏùåÏÑ± Ïù∏Ïãù ÏÉÅÌÉú
                Card(
                    modifier = Modifier
                        .weight(1f)
                        .height(50.dp)
                        .padding(end = 4.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = when {
                            speechCompleted -> Color(0xFF4CAF50)
                            isListening -> Color(0xFFFF5722)
                            else -> Color(0xFF666666)
                        }
                    ),
                    shape = RoundedCornerShape(25.dp)
                ) {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = when {
                                speechCompleted -> "‚úÖ ÏôÑÎ£å"
                                isListening -> "üé§ Îì£ÎäîÏ§ë"
                                else -> "‚è≥ ÎåÄÍ∏∞"
                            },
                            color = Color.White,
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }

                // Í∞ùÏ≤¥ Í∞êÏßÄ ÏÉÅÌÉú
                Card(
                    modifier = Modifier
                        .weight(1f)
                        .height(50.dp)
                        .padding(start = 4.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = if (speechCompleted) Color(0xFF9C27B0) else Color(0xFF666666)
                    ),
                    shape = RoundedCornerShape(25.dp)
                ) {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = if (speechCompleted) "üîç Í∞êÏßÄÏ§ë" else "‚è∏Ô∏è ÎåÄÍ∏∞",
                            color = Color.White,
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }
        }
    }
}